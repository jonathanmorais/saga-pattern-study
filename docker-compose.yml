version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    network_mode: "host"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    network_mode: "host"
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  mongodb:
    image: mongo:latest
    container_name: mongo
    network_mode: "host"    
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - /tmp/mongo_db:/data/db
  travel-api:
    build:
        context: ./travel
        dockerfile: Dockerfile.dev
    environment:
      - ENVIRONMENT=dev
      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:14268/api/traces
    ports:
        - 8090:8090
  flight-service:
    build:
        context: ./flight-service
        dockerfile: Dockerfile.dev
    environment:
      - ENVIRONMENT=dev
      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:14268/api/traces
    ports:
        - 8060:8060   
  forward-service:
    build:
        context: ./travel
        dockerfile: Dockerfile.dev
    environment:
      - ENVIRONMENT=dev
      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:14268/api/traces
    ports:
        - 8070:8070
